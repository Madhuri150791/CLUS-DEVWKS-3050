---
- name: FMC REST API
  hosts: localhost
  gather_facts: true
  vars_files:
    - vars.yml
    - credentials.yaml
  tasks:
    - name: Get Access Token
      uri:
        url: https://{{ ansible_host  }}/{{ auth_path }}
        method: POST
        headers:
          Content-Type: "application/json"
          Connection: "keep-alive"
        validate_certs: no
        user: "{{fmc_username}}"
        password: "{{fmc_password}}"
        force: yes
        force_basic_auth: yes
        status_code: 204
        return_content: yes
      register: auth
    - name: get token
      set_fact:
        auth_token: "{{auth.x_auth_access_token}}"
    - name: GET Device Details
      uri:
        url: "https://{{ ansible_host  }}/{{ resource_path }}/{{ auth.domain_uuid}}/devices/devicerecords"
        method: GET
        headers:
          "x-auth-access-token": "{{auth_token}}"
          Connection: keep-alive
        validate_certs: no
        status_code: [200,400]
        body_format: json

      register: getdevice
    - name: GET Physical Interfaces
      uri:
        url: "https://{{ ansible_host  }}/{{ resource_path }}/{{ auth.domain_uuid}}/devices/devicerecords/{{item.id}}/physicalinterfaces"
        method: GET
        headers:
          "x-auth-access-token": "{{auth_token}}"
          Connection: keep-alive
        validate_certs: no
        status_code: [200,400]
        body_format: json

      loop: "{{getdevice.json | json_query('items[]' )}}"
      register: getphyinterface
    - name: Get List details
      set_fact:
        intdetail: "{{intdetail| default({})  | combine({item.item.id:item.json| json_query('items[*].id' )})}}"
      with_items: "{{getphyinterface.results}}"
    - name: Change Type
      set_fact:
        intdetail: "{{intdetail | dict2items}}"
    - name: Display
      debug:
        msg: "{{intdetail}}"
    - name: Fetch Details of  interface
      uri:
        url: "https://{{ ansible_host  }}/{{ resource_path }}/{{ auth.domain_uuid}}/devices/devicerecords/{{item.0.key}}/physicalinterfaces/{{item.1}}"
        method: GET
        validate_certs: no
        headers:
          "x-auth-access-token": "{{auth_token}}"
          Connection: keep-alive
        body_format: json
        status_code: [200]
      with_subelements:
        - "{{intdetail}}"
        - value
      register: getallint
    - name: Create Inside Security Zone
      uri:
        url: "https://{{ ansible_host  }}/{{ resource_path }}/{{ auth.domain_uuid}}/object/securityzones"
        method: POST
        validate_certs: no
        headers:
          "x-auth-access-token": "{{auth_token}}"
          Connection: keep-alive
        body_format: json
        status_code: [201]
        body:
          type: "SecurityZone"
          name: "INSIDE"
          interfaceMode: "ROUTED"
      ignore_errors: yes
      register: inseczone
    - name: Get Inside Security Zone
      uri:
        url: "https://{{ ansible_host  }}/{{ resource_path }}/{{ auth.domain_uuid}}/object/securityzones?name=INSIDE"
        method: GET
        validate_certs: no
        headers:
          "x-auth-access-token": "{{auth_token}}"
          Connection: keep-alive
        body_format: json
        status_code: [200]
      register: inseczone1
      when: inseczone.status == 400
    - name: Get Inside Zone ID
      set_fact:
        insec: "{{item}}"
      with_items: "{{inseczone1.json | json_query('items[]' )}}"
      when: inseczone.status == 400


    - name: Update Interface -Inside - When Newly built
      uri:
        url: "{{item.url}}"
        method: PUT
        validate_certs: no
        headers:
          "x-auth-access-token": "{{auth_token}}"
          Connection: keep-alive
        body_format: json
        status_code: [202,200]
        body:
          mode: "{{item.json.mode}}"
          name: "{{item.json.name}}"
          enabled: true
          ifname: "INSIDE"
          id: "{{item.json.id}}"
          securityZone:
            id: "{{inseczone.json.id}}"
            type:  "{{inseczone.json.type}}"
          ipv4: { dhcp: {"enableDefaultRouteDHCP": "true","dhcpRouteMetric": 1}}
      with_items: "{{getallint.results}}"
      ignore_errors: yes
      when: item.json.name == 'GigabitEthernet0/0' and inseczone.status == 200



    - name: Update Interface -Inside - Already created
      uri:
        url: "{{item.url}}"
        method: PUT
        validate_certs: no
        headers:
          "x-auth-access-token": "{{auth_token}}"
          Connection: keep-alive
        body_format: json
        status_code: [202,200]
        body:
          mode: "{{item.json.mode}}"
          name: "{{item.json.name}}"
          enabled: true
          ifname: "INSIDE"
          id: "{{item.json.id}}"
          securityZone:
            id: "{{insec.id}}"
            type:  "{{insec.type}}"
          ipv4: { dhcp: {"enableDefaultRouteDHCP": "true","dhcpRouteMetric": 1}}
      with_items: "{{getallint.results}}"
      when: item.json.name == 'GigabitEthernet0/0' and inseczone.status == 400

    - name: Create OUTSIDE Security Zone
      uri:
        url: "https://{{ ansible_host  }}/{{ resource_path }}/{{ auth.domain_uuid}}/object/securityzones"
        method: POST
        validate_certs: no
        headers:
          "x-auth-access-token": "{{auth_token}}"
          Connection: keep-alive
        body_format: json
        status_code: [201]
        body:
          type: "SecurityZone"
          name: "OUTSIDE"
          interfaceMode: "ROUTED"
      ignore_errors: yes
      register: outseczone
    - name: Get  OUTSIDE Security Zone
      uri:
        url: "https://{{ ansible_host  }}/{{ resource_path }}/{{ auth.domain_uuid}}/object/securityzones?name=OUTSIDE"
        method: GET
        validate_certs: no
        headers:
          "x-auth-access-token": "{{auth_token}}"
          Connection: keep-alive
        body_format: json
        status_code: [200]
      register: outseczone1
      when: outseczone.status == 400
    - name: Get Outside Zone ID
      set_fact:
        outsec: "{{item}}"
      with_items: "{{outseczone1.json | json_query('items[]' )}}"
      when: outseczone.status == 400


    - name: Update Interface -OUTSIDE - New Created 
      uri:
        url: "{{item.url}}"
        method: PUT
        validate_certs: no
        headers:
          "x-auth-access-token": "{{auth_token}}"
          Connection: keep-alive
        body_format: json
        status_code: [202,200]
        body:
          mode: "{{item.json.mode}}"
          name: "{{item.json.name}}"
          enabled: true
          ifname: "OUTSIDE"
          id: "{{item.json.id}}"
          securityZone:
            id: "{{outseczone.json.id}}"
            type:  "{{outseczone.json.type}}"
          ipv4: { dhcp: {"enableDefaultRouteDHCP": "true","dhcpRouteMetric": 1}}
      ignore_errors: yes
      with_items: "{{getallint.results}}"
      when: item.json.name == 'GigabitEthernet0/1' and outseczone.status == 200
    - name: Update Interface -OUTSIDE - Already Built
      uri:
        url: "{{item.url}}"
        method: PUT
        validate_certs: no
        headers:
          "x-auth-access-token": "{{auth_token}}"
          Connection: keep-alive
        body_format: json
        status_code: [202,200]
        body:
          mode: "{{item.json.mode}}"
          name: "{{item.json.name}}"
          enabled: true
          ifname: "OUTSIDE"
          id: "{{item.json.id}}"
          securityZone:
            id: "{{outsec.id}}"
            type:  "{{outsec.type}}"
          ipv4: { dhcp: {"enableDefaultRouteDHCP": "true","dhcpRouteMetric": 1}}
      with_items: "{{getallint.results}}"
      when: item.json.name == 'GigabitEthernet0/1' and outseczone.status == 400

    - name: Get Deployments
      uri:
        url: "https://{{ ansible_host  }}/{{ resource_path }}/{{ auth.domain_uuid}}/deployment/deployabledevices"
        method: GET
        headers:
          "x-auth-access-token": "{{auth_token}}"
          Connection: keep-alive
        validate_certs: no
        status_code: [200,400]
        body_format: json
      register: deployable
    - name: Get Timestamp
      set_fact:
        stamp: "{{ item.version}}"
      with_list: "{{deployable.json | json_query('items[]')}}"
    - name: Value
      set_fact:
        devicelist: "{{ getdevice.json | json_query('items[*].id' ) | list}}"
    - name: Deploy Changes
      uri:
        url: "https://{{ ansible_host  }}/{{ resource_path }}/{{ auth.domain_uuid}}/deployment/deploymentrequests"
        method: POST
        headers:
          "x-auth-access-token": "{{auth_token}}"
          Connection: keep-alive
        validate_certs: no
        status_code: [202,200]
        body_format: json
        body:
          type: "DeploymentRequest"
          version:  "{{ stamp}}"
          ignoreWarning: true
          deviceList: "{{devicelist}}"
